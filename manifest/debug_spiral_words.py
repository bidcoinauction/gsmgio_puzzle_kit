#!/usr/bin/env python3
# debug_spiral_words.py

from bip_utils import Bip39MnemonicValidator

# â€”â€”â€” 1) Full 14Ã—14 grid transcription â€”â€”â€”
# Make sure row 13 (0-based) has column 3='B' and column 8='Y'.
GRID = [
    ['K','B','K','W','K','B','W','K','K','B','W','K','Y','K'],  # 0
    ['W','K','B','K','W','K','K','W','B','K','K','W','K','W'],  # 1
    ['K','W','K','W','K','W','K','K','K','W','K','W','K','K'],  # 2
    ['B','K','W','K','B','K','W','K','W','K','Y','K','W','K'],  # 3
    ['K','W','K','K','K','W','Y','Y','W','K','K','W','K','W'],  # 4
    ['W','K','B','K','W','K','W','W','W','K','W','K','K','B'],  # 5
    ['K','W','K','W','K','B','W','K','B','W','K','W','K','K'],  # 6
    ['K','K','K','K','K','W','K','W','K','Y','K','W','K','W'],  # 7
    ['W','K','W','K','Y','K','Y','W','K','K','B','K','W','K'],  # 8
    ['K','B','K','W','K','W','W','K','W','K','K','W','K','Y'],  # 9
    ['W','K','W','K','B','K','K','W','K','W','K','W','K','K'],  # 10
    ['K','W','K','W','K','W','K','Y','W','K','B','K','W','K'],  # 11
    ['W','K','Y','K','W','K','W','K','K','W','K','B','K','W'],  # 12
    ['K','K','K','B','K','W','K','W','Y','K','W','K','W','K'],  # 13  <-- 3='B', 8='Y'
]

# â€”â€”â€” 2) Verified 196-entry CCW spiral â€”â€”â€”
SPIRAL = [
    (6,6),(6,7),(5,7),(5,6),(5,5),(6,5),(7,5),(7,6),(7,7),(7,8),
    (6,8),(5,8),(4,8),(4,7),(4,6),(4,5),(4,4),(5,4),(6,4),(7,4),
    (8,4),(8,5),(8,6),(8,7),(8,8),(8,9),(7,9),(6,9),(5,9),(4,9),
    (3,9),(3,8),(3,7),(3,6),(3,5),(3,4),(3,3),(4,3),(5,3),(6,3),
    (7,3),(8,3),(9,3),(9,4),(9,5),(9,6),(9,7),(9,8),(9,9),(9,10),
    (8,10),(7,10),(6,10),(5,10),(4,10),(3,10),(2,10),(2,9),(2,8),
    (2,7),(2,6),(2,5),(2,4),(2,3),(2,2),(3,2),(4,2),(5,2),(6,2),
    (7,2),(8,2),(9,2),(10,2),(10,3),(10,4),(10,5),(10,6),(10,7),
    (10,8),(10,9),(10,10),(10,11),(9,11),(8,11),(7,11),(6,11),
    (5,11),(4,11),(3,11),(2,11),(1,11),(1,10),(1,9),(1,8),(1,7),
    (1,6),(1,5),(1,4),(1,3),(1,2),(1,1),(2,1),(3,1),(4,1),(5,1),
    (6,1),(7,1),(8,1),(9,1),(10,1),(11,1),(11,2),(11,3),(11,4),
    (11,5),(11,6),(11,7),(11,8),(11,9),(11,10),(11,11),(11,12),
    (10,12),(9,12),(8,12),(7,12),(6,12),(5,12),(4,12),(3,12),
    (2,12),(1,12),(0,12),(0,11),(0,10),(0,9),(0,8),(0,7),(0,6),
    (0,5),(0,4),(0,3),(0,2),(0,1),(0,0),(1,0),(2,0),(3,0),(4,0),
    (5,0),(6,0),(7,0),(8,0),(9,0),(10,0),(11,0),(12,0),(12,1),
    (12,2),(12,3),(12,4),(12,5),(12,6),(12,7),(12,8),(12,9),
    (12,10),(12,11),(12,12),(12,13),(11,13),(10,13),(9,13),(8,13),
    (7,13),(6,13),(5,13),(4,13),(3,13),(2,13),(1,13),(0,13)
]

# â€”â€”â€” 3) Corrected 18 coordinateâ†’word mapping â€”â€”â€”
coord_to_word = {
    (4,6): 'grant',
    (4,7): 'capital',
    (8,6): 'bright',
    (8,4): 'forward',
    (7,9): 'miracle',
    (6,8): 'foam',
    (6,5): 'charge',
    (5,2): 'lumber',
    (12,2): 'memory',
    (8,10): 'mountain',
    (9,1): 'chest',
    (10,4): 'argue',
    (11,7): 'because',
    (11,10): 'either',
    (12,11): 'juice',
    (13,3): 'frost',
    (13,8): 'initial',
    (9,13): 'guilt',
}

# â€”â€”â€” 4) Extract & print â€”â€”â€”
yb = [(r,c) for r,c in SPIRAL if (r,c) in coord_to_word and GRID[r][c]=='Y']
bb = [(r,c) for r,c in SPIRAL if (r,c) in coord_to_word and GRID[r][c]=='B']

print("ðŸŸ¨ Yellow coords & words:")
for idx,(r,c) in enumerate(yb,1):
    print(f"{idx:2}. {(r,c)} -> {coord_to_word[(r,c)]}")

print("\nðŸŸ¦ Blue coords & words:")
for idx,(r,c) in enumerate(bb,1):
    print(f"{idx:2}. {(r,c)} -> {coord_to_word[(r,c)]}")

combined = yb + bb
mnemonic = " ".join(coord_to_word[c] for c in combined)
print("\nðŸ“œ Combined mnemonic (Y then B):")
print(mnemonic)

print("\nChecksum valid?:", Bip39MnemonicValidator().IsValid(mnemonic))
